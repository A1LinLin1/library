import math
from Crypto.Util.number import long_to_bytes
def decompose(n):
    for p in range(2, int(math.sqrt(n))):
        q=n-p**2
        if p>0 and math.sqrt(q).is_integer():
            return p, int(math.sqrt(q))
    return 0, 0 




n1 = 17150829492682350046418434270629538255886430592237048932769166498541047520040260765442945191585223045675259552101786510412498768929825136268067949789919170
c1 = 997380279684765292027913360123546628475940129781898864533070033850128826407879036713623226849993920770168271545155751534156035612333485352021775738456151

p,q=decompose(n1)
n=p*q
e=65537

phi=(p-1)*(q-1)
print(p,q)
d=pow(e,-1,phi)
flag=pow(c1,d,n)
print(long_to_bytes(flag))

# d=pow(e,-1,phi)
# flag=pow(c,d,n)

